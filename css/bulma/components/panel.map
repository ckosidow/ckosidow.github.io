{
	"version": 3,
	"file": "panel.css",
	"sources": [
		"../../../sass/bulma/components/panel.sass",
		"../../../sass/bulma/utilities/mixins.sass",
		"../../../sass/bulma/utilities/derived-variables.sass",
		"../../../sass/bulma/utilities/initial-variables.sass",
		"../../../sass/bulma/utilities/functions.sass"
	],
	"sourcesContent": [
		"@import \"../utilities/mixins\";\n\n$panel-margin: $block-spacing !default;\n$panel-item-border: 1px solid $border-light !default;\n$panel-radius: $radius-large !default;\n$panel-shadow: $shadow !default;\n\n$panel-heading-background-color: $border-light !default;\n$panel-heading-color: $text-strong !default;\n$panel-heading-line-height: 1.25 !default;\n$panel-heading-padding: 0.75em 1em !default;\n$panel-heading-radius: $radius !default;\n$panel-heading-size: 1.25em !default;\n$panel-heading-weight: $weight-bold !default;\n\n$panel-tabs-font-size: 0.875em !default;\n$panel-tab-border-bottom: 1px solid $border !default;\n$panel-tab-active-border-bottom-color: $link-active-border !default;\n$panel-tab-active-color: $link-active !default;\n\n$panel-list-item-color: $text !default;\n$panel-list-item-hover-color: $link !default;\n\n$panel-block-color: $text-strong !default;\n$panel-block-hover-background-color: $background !default;\n$panel-block-active-border-left-color: $link !default;\n$panel-block-active-color: $link-active !default;\n$panel-block-active-icon-color: $link !default;\n\n$panel-icon-color: $text-light !default;\n$panel-colors: $colors !default;\n\n.panel {\n  border-radius: $panel-radius;\n  box-shadow: $panel-shadow;\n  font-size: $size-normal;\n  &:not(:last-child) {\n    margin-bottom: $panel-margin; }\n  // Colors\n  @each $name, $components in $panel-colors {\n    $color: nth($components, 1);\n    $color-invert: nth($components, 2);\n    &.is-#{$name} {\n      .panel-heading {\n        background-color: $color;\n        color: $color-invert; }\n      .panel-tabs a.is-active {\n        border-bottom-color: $color; }\n      .panel-block.is-active .panel-icon {\n        color: $color; } } } }\n\n.panel-tabs,\n.panel-block {\n  &:not(:last-child) {\n    border-bottom: $panel-item-border; } }\n\n.panel-heading {\n  background-color: $panel-heading-background-color;\n  border-radius: $panel-radius $panel-radius 0 0;\n  color: $panel-heading-color;\n  font-size: $panel-heading-size;\n  font-weight: $panel-heading-weight;\n  line-height: $panel-heading-line-height;\n  padding: $panel-heading-padding; }\n\n.panel-tabs {\n  align-items: flex-end;\n  display: flex;\n  font-size: $panel-tabs-font-size;\n  justify-content: center;\n  a {\n    border-bottom: $panel-tab-border-bottom;\n    margin-bottom: -1px;\n    padding: 0.5em;\n    // Modifiers\n    &.is-active {\n      border-bottom-color: $panel-tab-active-border-bottom-color;\n      color: $panel-tab-active-color; } } }\n\n.panel-list {\n  a {\n    color: $panel-list-item-color;\n    &:hover {\n      color: $panel-list-item-hover-color; } } }\n\n.panel-block {\n  align-items: center;\n  color: $panel-block-color;\n  display: flex;\n  justify-content: flex-start;\n  padding: 0.5em 0.75em;\n  input[type=\"checkbox\"] {\n    @include ltr-property(\"margin\", 0.75em); }\n  & > .control {\n    flex-grow: 1;\n    flex-shrink: 1;\n    width: 100%; }\n  &.is-wrapped {\n    flex-wrap: wrap; }\n  &.is-active {\n    border-left-color: $panel-block-active-border-left-color;\n    color: $panel-block-active-color;\n    .panel-icon {\n      color: $panel-block-active-icon-color; } }\n  &:last-child {\n    border-bottom-left-radius: $panel-radius;\n    border-bottom-right-radius: $panel-radius; } }\n\na.panel-block,\nlabel.panel-block {\n  cursor: pointer;\n  &:hover {\n    background-color: $panel-block-hover-background-color; } }\n\n.panel-icon {\n  @include fa(14px, 1em);\n  color: $panel-icon-color;\n  @include ltr-property(\"margin\", 0.75em);\n  .fa {\n    font-size: inherit;\n    line-height: inherit; } }\n",
		"@import \"derived-variables\";\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \" \";\n    display: table; } }\n\n@mixin center($width, $height: 0) {\n  position: absolute;\n  @if $height != 0 {\n    left: calc(50% - (#{$width} * 0.5));\n    top: calc(50% - (#{$height} * 0.5)); }\n  @else {\n    left: calc(50% - (#{$width} * 0.5));\n    top: calc(50% - (#{$width} * 0.5)); } }\n\n@mixin fa($size, $dimensions) {\n  display: inline-block;\n  font-size: $size;\n  height: $dimensions;\n  line-height: $dimensions;\n  text-align: center;\n  vertical-align: top;\n  width: $dimensions; }\n\n@mixin hamburger($dimensions) {\n  cursor: pointer;\n  display: block;\n  height: $dimensions;\n  position: relative;\n  width: $dimensions;\n  span {\n    background-color: currentColor;\n    display: block;\n    height: 1px;\n    left: calc(50% - 8px);\n    position: absolute;\n    transform-origin: center;\n    transition-duration: $speed;\n    transition-property: background-color, opacity, transform;\n    transition-timing-function: $easing;\n    width: 16px;\n    &:nth-child(1) {\n      top: calc(50% - 6px); }\n    &:nth-child(2) {\n      top: calc(50% - 1px); }\n    &:nth-child(3) {\n      top: calc(50% + 4px); } }\n  &:hover {\n    background-color: bulmaRgba(black, 0.05); }\n  // Modifers\n  &.is-active {\n    span {\n      &:nth-child(1) {\n        transform: translateY(5px) rotate(45deg); }\n      &:nth-child(2) {\n        opacity: 0; }\n      &:nth-child(3) {\n        transform: translateY(-5px) rotate(-45deg); } } } }\n\n@mixin overflow-touch {\n  -webkit-overflow-scrolling: touch; }\n\n@mixin placeholder {\n  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input';\n  @each $placeholder in $placeholders {\n    &:#{$placeholder}-placeholder {\n      @content; } } }\n\n@mixin reset {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: 1em;\n  margin: 0;\n  padding: 0; }\n\n// Responsiveness\n\n@mixin from($device) {\n  @media screen and (min-width: $device) {\n    @content; } }\n\n@mixin until($device) {\n  @media screen and (max-width: $device - 1px) {\n    @content; } }\n\n@mixin mobile {\n  @media screen and (max-width: $tablet - 1px) {\n    @content; } }\n\n@mixin tablet {\n  @media screen and (min-width: $tablet), print {\n    @content; } }\n\n@mixin tablet-only {\n  @media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {\n    @content; } }\n\n@mixin touch {\n  @media screen and (max-width: $desktop - 1px) {\n    @content; } }\n\n@mixin desktop {\n  @media screen and (min-width: $desktop) {\n    @content; } }\n\n@mixin desktop-only {\n  @if $widescreen-enabled {\n    @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {\n      @content; } } }\n\n@mixin until-widescreen {\n  @if $widescreen-enabled {\n    @media screen and (max-width: $widescreen - 1px) {\n      @content; } } }\n\n@mixin widescreen {\n  @if $widescreen-enabled {\n    @media screen and (min-width: $widescreen) {\n      @content; } } }\n\n@mixin widescreen-only {\n  @if $widescreen-enabled and $fullhd-enabled {\n    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px) {\n      @content; } } }\n\n@mixin until-fullhd {\n  @if $fullhd-enabled {\n    @media screen and (max-width: $fullhd - 1px) {\n      @content; } } }\n\n@mixin fullhd {\n  @if $fullhd-enabled {\n    @media screen and (min-width: $fullhd) {\n      @content; } } }\n\n@mixin ltr {\n  @if not $rtl {\n    @content; } }\n\n@mixin rtl {\n  @if $rtl {\n    @content; } }\n\n@mixin ltr-property($property, $spacing, $right: true) {\n  $normal: if($right, \"right\", \"left\");\n  $opposite: if($right, \"left\", \"right\");\n  @if $rtl {\n    #{$property}-#{$opposite}: $spacing; }\n  @else {\n    #{$property}-#{$normal}: $spacing; } }\n\n@mixin ltr-position($spacing, $right: true) {\n  $normal: if($right, \"right\", \"left\");\n  $opposite: if($right, \"left\", \"right\");\n  @if $rtl {\n    #{$opposite}: $spacing; }\n  @else {\n    #{$normal}: $spacing; } }\n\n// Placeholders\n\n@mixin unselectable {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n@mixin arrow($color: transparent) {\n  border: 3px solid $color;\n  border-radius: 2px;\n  border-right: 0;\n  border-top: 0;\n  content: \" \";\n  display: block;\n  height: 0.625em;\n  margin-top: -0.4375em;\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  transform: rotate(-45deg);\n  transform-origin: center;\n  width: 0.625em; }\n\n@mixin block($spacing: $block-spacing) {\n  &:not(:last-child) {\n    margin-bottom: $spacing; } }\n\n@mixin delete {\n  @include unselectable;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background-color: bulmaRgba($scheme-invert, 0.2);\n  border: none;\n  border-radius: $radius-rounded;\n  cursor: pointer;\n  pointer-events: auto;\n  display: inline-block;\n  flex-grow: 0;\n  flex-shrink: 0;\n  font-size: 0;\n  height: 20px;\n  max-height: 20px;\n  max-width: 20px;\n  min-height: 20px;\n  min-width: 20px;\n  outline: none;\n  position: relative;\n  vertical-align: top;\n  width: 20px;\n  &::before,\n  &::after {\n    background-color: $scheme-main;\n    content: \"\";\n    display: block;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%) rotate(45deg);\n    transform-origin: center center; }\n  &::before {\n    height: 2px;\n    width: 50%; }\n  &::after {\n    height: 50%;\n    width: 2px; }\n  &:hover,\n  &:focus {\n    background-color: bulmaRgba($scheme-invert, 0.3); }\n  &:active {\n    background-color: bulmaRgba($scheme-invert, 0.4); }\n  // Sizes\n  &.is-small {\n    height: 16px;\n    max-height: 16px;\n    max-width: 16px;\n    min-height: 16px;\n    min-width: 16px;\n    width: 16px; }\n  &.is-medium {\n    height: 24px;\n    max-height: 24px;\n    max-width: 24px;\n    min-height: 24px;\n    min-width: 24px;\n    width: 24px; }\n  &.is-large {\n    height: 32px;\n    max-height: 32px;\n    max-width: 32px;\n    min-height: 32px;\n    min-width: 32px;\n    width: 32px; } }\n\n@mixin loader {\n  animation: spinAround 500ms infinite linear;\n  border: 2px solid $grey-lighter;\n  border-radius: $radius-rounded;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  content: \"\";\n  display: block;\n  height: 1em;\n  position: relative;\n  width: 1em; }\n\n@mixin overlay($offset: 0) {\n  bottom: $offset;\n  left: $offset;\n  position: absolute;\n  right: $offset;\n  top: $offset; }\n\n",
		"@import \"initial-variables\";\n@import \"functions\";\n\n$primary: $turquoise !default;\n\n$info: $cyan !default;\n$success: $green !default;\n$warning: $yellow !default;\n$danger: $red !default;\n\n$light: $white-ter !default;\n$dark: $grey-darker !default;\n\n// Invert colors\n\n$orange-invert: findColorInvert($orange) !default;\n$yellow-invert: findColorInvert($yellow) !default;\n$green-invert: findColorInvert($green) !default;\n$turquoise-invert: findColorInvert($turquoise) !default;\n$cyan-invert: findColorInvert($cyan) !default;\n$blue-invert: findColorInvert($blue) !default;\n$purple-invert: findColorInvert($purple) !default;\n$red-invert: findColorInvert($red) !default;\n\n$primary-invert: findColorInvert($primary) !default;\n$primary-light: findLightColor($primary) !default;\n$primary-dark: findDarkColor($primary) !default;\n$info-invert: findColorInvert($info) !default;\n$info-light: findLightColor($info) !default;\n$info-dark: findDarkColor($info) !default;\n$success-invert: findColorInvert($success) !default;\n$success-light: findLightColor($success) !default;\n$success-dark: findDarkColor($success) !default;\n$warning-invert: findColorInvert($warning) !default;\n$warning-light: findLightColor($warning) !default;\n$warning-dark: findDarkColor($warning) !default;\n$danger-invert: findColorInvert($danger) !default;\n$danger-light: findLightColor($danger) !default;\n$danger-dark: findDarkColor($danger) !default;\n$light-invert: findColorInvert($light) !default;\n$dark-invert: findColorInvert($dark) !default;\n\n// General colors\n\n$scheme-main: $white !default;\n$scheme-main-bis: $white-bis !default;\n$scheme-main-ter: $white-ter !default;\n$scheme-invert: $black !default;\n$scheme-invert-bis: $black-bis !default;\n$scheme-invert-ter: $black-ter !default;\n\n$background: $white-ter !default;\n\n$border: $grey-lighter !default;\n$border-hover: $grey-light !default;\n$border-light: $grey-lightest !default;\n$border-light-hover: $grey-light !default;\n\n// Text colors\n\n$text: $grey-dark !default;\n$text-invert: findColorInvert($text) !default;\n$text-light: $grey !default;\n$text-strong: $grey-darker !default;\n\n// Code colors\n\n$code: darken($red, 15%) !default;\n$code-background: $background !default;\n\n$pre: $text !default;\n$pre-background: $background !default;\n\n// Link colors\n\n$link: $blue !default;\n$link-invert: findColorInvert($link) !default;\n$link-light: findLightColor($link) !default;\n$link-dark: findDarkColor($link) !default;\n$link-visited: $purple !default;\n\n$link-hover: $grey-darker !default;\n$link-hover-border: $grey-light !default;\n\n$link-focus: $grey-darker !default;\n$link-focus-border: $blue !default;\n\n$link-active: $grey-darker !default;\n$link-active-border: $grey-dark !default;\n\n// Typography\n\n$family-primary: $family-sans-serif !default;\n$family-secondary: $family-sans-serif !default;\n$family-code: $family-monospace !default;\n\n$size-small: $size-7 !default;\n$size-normal: $size-6 !default;\n$size-medium: $size-5 !default;\n$size-large: $size-4 !default;\n\n// Effects\n\n$shadow: 0 0.5em 1em -0.125em rgba($scheme-invert, 0.1), 0 0px 0 1px rgba($scheme-invert, 0.02) !default;\n\n// Lists and maps\n$custom-colors: null !default;\n$custom-shades: null !default;\n\n$colors: mergeColorMaps((\"white\": ($white, $black), \"black\": ($black, $white), \"light\": ($light, $light-invert), \"dark\": ($dark, $dark-invert), \"primary\": ($primary, $primary-invert, $primary-light, $primary-dark), \"link\": ($link, $link-invert, $link-light, $link-dark), \"info\": ($info, $info-invert, $info-light, $info-dark), \"success\": ($success, $success-invert, $success-light, $success-dark), \"warning\": ($warning, $warning-invert, $warning-light, $warning-dark), \"danger\": ($danger, $danger-invert, $danger-light, $danger-dark)), $custom-colors) !default;\n\n$shades: mergeColorMaps((\"black-bis\": $black-bis, \"black-ter\": $black-ter, \"grey-darker\": $grey-darker, \"grey-dark\": $grey-dark, \"grey\": $grey, \"grey-light\": $grey-light, \"grey-lighter\": $grey-lighter, \"white-ter\": $white-ter, \"white-bis\": $white-bis), $custom-shades) !default;\n\n$sizes: $size-1 $size-2 $size-3 $size-4 $size-5 $size-6 $size-7 !default;\n",
		"// Colors\n\n$black:        hsl(0, 0%, 4%) !default;\n$black-bis:    hsl(0, 0%, 7%) !default;\n$black-ter:    hsl(0, 0%, 14%) !default;\n\n$grey-darker:  hsl(0, 0%, 21%) !default;\n$grey-dark:    hsl(0, 0%, 29%) !default;\n$grey:         hsl(0, 0%, 48%) !default;\n$grey-light:   hsl(0, 0%, 71%) !default;\n$grey-lighter: hsl(0, 0%, 86%) !default;\n$grey-lightest: hsl(0, 0%, 93%) !default;\n\n$white-ter:    hsl(0, 0%, 96%) !default;\n$white-bis:    hsl(0, 0%, 98%) !default;\n$white:        hsl(0, 0%, 100%) !default;\n\n$orange:       hsl(14,  100%, 53%) !default;\n$yellow:       hsl(44,  100%, 77%) !default;\n$green:        hsl(153, 53%,  53%) !default;\n$turquoise:    hsl(171, 100%, 41%) !default;\n$cyan:         hsl(207, 61%,  53%) !default;\n$blue:         hsl(229, 53%,  53%) !default;\n$purple:       hsl(271, 100%, 71%) !default;\n$red:          hsl(348, 86%, 61%) !default;\n\n// Typography\n\n$family-sans-serif: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !default;\n$family-monospace: monospace !default;\n$render-mode: optimizeLegibility !default;\n\n$size-1: 3rem !default;\n$size-2: 2.5rem !default;\n$size-3: 2rem !default;\n$size-4: 1.5rem !default;\n$size-5: 1.25rem !default;\n$size-6: 1rem !default;\n$size-7: 0.75rem !default;\n\n$weight-light: 300 !default;\n$weight-normal: 400 !default;\n$weight-medium: 500 !default;\n$weight-semibold: 600 !default;\n$weight-bold: 700 !default;\n\n// Spacing\n\n$block-spacing: 1.5rem !default;\n\n// Responsiveness\n\n// The container horizontal gap, which acts as the offset for breakpoints\n$gap: 32px !default;\n// 960, 1152, and 1344 have been chosen because they are divisible by both 12 and 16\n$tablet: 769px !default;\n// 960px container + 4rem\n$desktop: 960px + (2 * $gap) !default;\n// 1152px container + 4rem\n$widescreen: 1152px + (2 * $gap) !default;\n$widescreen-enabled: true !default;\n// 1344px container + 4rem\n$fullhd: 1344px + (2 * $gap) !default;\n$fullhd-enabled: true !default;\n\n// Miscellaneous\n\n$easing: ease-out !default;\n$radius-small: 2px !default;\n$radius: 4px !default;\n$radius-large: 6px !default;\n$radius-rounded: 9999px !default;\n$speed: 86ms !default;\n\n// Flags\n\n$variable-columns: true !default;\n$rtl: false !default;\n",
		"@function mergeColorMaps($bulma-colors, $custom-colors) {\n  // We return at least Bulma's hard-coded colors\n  $merged-colors: $bulma-colors;\n\n  // We want a map as input\n  @if type-of($custom-colors) == 'map' {\n    @each $name, $components in $custom-colors {\n      // The color name should be a string\n      // and the components either a single color\n      // or a colors list with at least one element\n      @if type-of($name) == 'string' and (type-of($components) == 'list' or type-of($components) == 'color') and length($components) >= 1 {\n        $color-base: null;\n        $color-invert: null;\n        $color-light: null;\n        $color-dark: null;\n        $value: null;\n\n        // The param can either be a single color\n        // or a list of 2 colors\n        @if type-of($components) == 'color' {\n          $color-base: $components;\n          $color-invert: findColorInvert($color-base);\n          $color-light: findLightColor($color-base);\n          $color-dark: findDarkColor($color-base); }\n        @else if type-of($components) == 'list' {\n          $color-base: nth($components, 1);\n          // If Invert, Light and Dark are provided\n          @if length($components) > 3 {\n            $color-invert: nth($components, 2);\n            $color-light: nth($components, 3);\n            $color-dark: nth($components, 4);\n }            // If only Invert and Light are provided\n          @else if length($components) > 2 {\n            $color-invert: nth($components, 2);\n            $color-light: nth($components, 3);\n            $color-dark: findDarkColor($color-base);\n }            // If only Invert is provided\n          @else {\n            $color-invert: nth($components, 2);\n            $color-light: findLightColor($color-base);\n            $color-dark: findDarkColor($color-base); } }\n\n        $value: ($color-base, $color-invert, $color-light, $color-dark);\n\n        // We only want to merge the map if the color base is an actual color\n        @if type-of($color-base) == 'color' {\n          // We merge this colors elements as map with Bulma's colors map\n          // (we can override them this way, no multiple definition for the same name)\n          // $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert, $color-light, $color-dark)))\n          $merged-colors: map_merge($merged-colors, ($name: $value)); } } } }\n\n  @return $merged-colors; }\n\n@function powerNumber($number, $exp) {\n  $value: 1;\n  @if $exp > 0 {\n    @for $i from 1 through $exp {\n      $value: $value * $number; } }\n  @else if $exp < 0 {\n    @for $i from 1 through -$exp {\n      $value: divide($value, $number); } }\n  @return $value; }\n\n@function colorLuminance($color) {\n  @if type-of($color) != 'color' {\n    @return 0.55; }\n  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));\n  @each $name, $value in $color-rgb {\n    $adjusted: 0;\n    $value: divide($value, 255);\n    @if $value < 0.03928 {\n      $value: divide($value, 12.92); }\n    @else {\n      $value: divide(($value + .055), 1.055);\n      $value: powerNumber($value, 2); }\n    $color-rgb: map-merge($color-rgb, ($name: $value)); }\n  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722); }\n\n@function findColorInvert($color) {\n  @if (colorLuminance($color) > 0.55) {\n    @return rgba(#000, 0.7); }\n  @else {\n    @return #fff; } }\n\n@function findLightColor($color) {\n  @if type-of($color) == 'color' {\n    $l: 96%;\n    @if lightness($color) > 96% {\n      $l: lightness($color); }\n    @return change-color($color, $lightness: $l); }\n  @return $background; }\n\n@function findDarkColor($color) {\n  @if type-of($color) == 'color' {\n    $base-l: 29%;\n    $luminance: colorLuminance($color);\n    $luminance-delta: (0.53 - $luminance);\n    $target-l: round($base-l + ($luminance-delta * 53));\n    @return change-color($color, $lightness: max($base-l, $target-l)); }\n  @return $text-strong; }\n\n@function bulmaRgba($color, $alpha) {\n  @if type-of($color) != 'color' {\n    @return $color; }\n  @return rgba($color, $alpha); }\n\n@function bulmaDarken($color, $amount) {\n  @if type-of($color) != 'color' {\n    @return $color; }\n  @return darken($color, $amount); }\n\n@function bulmaLighten($color, $amount) {\n  @if type-of($color) != 'color' {\n    @return $color; }\n  @return lighten($color, $amount); }\n\n// Custom divide function by @mdo from https://github.com/twbs/bootstrap/pull/34245\n// Replaces old slash division deprecated in Dart Sass\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  $quotient: 0;\n  $remainder: $dividend;\n  @if $dividend == 0 {\n    @return 0; }\n  @if $divisor == 0 {\n    @error \"Cannot divide by 0\"; }\n  @if $divisor == 1 {\n    @return $dividend; }\n  @while $remainder >= $divisor {\n    $quotient: $quotient + 1;\n    $remainder: $remainder - $divisor; }\n  @if $remainder > 0 and $precision > 0 {\n    $remainder: divide($remainder * 10, $divisor, $precision - 1) * .1; }\n  @return ($quotient + $remainder) * $sign; }\n"
	],
	"names": [],
	"mappings": "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"
}